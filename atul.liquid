<!-- Model-Based Product Thumbnails Section -->
<div id="model-thumbnails-container" style="margin: 2rem 0;">
  <h3 id="model-thumbnails-title" style="display: none; margin-bottom: 1rem; font-size: 1.25rem; font-weight: 600;">
    More from this collection
  </h3>
  <div id="model-thumbnails" class="model-thumbnails-grid"></div>
  <div id="model-thumbnails-loading" style="display: none; text-align: center; padding: 2rem;">
    <p>Loading related products...</p>
  </div>
</div>

<style>
  .model-thumbnails-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
  }

  .model-thumbnail {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.3s ease;
    background: #fff;
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .model-thumbnail:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: #333;
  }

  .model-thumbnail-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    display: block;
  }

  .model-thumbnail-info {
    padding: 0.75rem;
  }

  .model-thumbnail-title {
    font-size: 0.9rem;
    font-weight: 500;
    margin: 0;
    line-height: 1.3;
    color: #333;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .model-thumbnail-price {
    font-size: 0.85rem;
    color: #666;
    margin-top: 0.25rem;
  }

  @media (max-width: 768px) {
    .model-thumbnails-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 0.75rem;
    }
    
    .model-thumbnail-image {
      height: 150px;
    }
    
    .model-thumbnail-info {
      padding: 0.5rem;
    }
  }
</style>

<script>
(function() {
  'use strict';
  
  // Configuration
  const CONFIG = {
    storefrontAccessToken: '{{ shop.permanent_domain | append: '_storefront_access_token' }}', // You'll need to replace this with your actual token
    shopDomain: '{{ shop.permanent_domain }}',
    currentProductId: '{{ product.id }}',
    currentProductModel: '{{ product.metafields.custom.model }}',
    maxProducts: 12
  };

  // GraphQL Query
  const PRODUCTS_QUERY = `
    query getProductsByMetafield($first: Int!, $query: String!) {
      products(first: $first, query: $query) {
        edges {
          node {
            id
            title
            handle
            featuredImage {
              url(transform: { maxWidth: 400, maxHeight: 400 })
              altText
            }
            priceRange {
              minVariantPrice {
                amount
                currencyCode
              }
            }
            metafields(identifiers: [{namespace: "custom", key: "model"}]) {
              value
            }
          }
        }
      }
    }
  `;

  // Utility functions
  function formatPrice(amount, currencyCode) {
    return new Intl.NumberFormat('{{ localization.language.iso_code }}', {
      style: 'currency',
      currency: currencyCode
    }).format(amount);
  }

  function createThumbnailHTML(product) {
    const imageUrl = product.featuredImage?.url || '/assets/no-image.svg';
    const imageAlt = product.featuredImage?.altText || product.title;
    const price = formatPrice(
      product.priceRange.minVariantPrice.amount,
      product.priceRange.minVariantPrice.currencyCode
    );

    return `
      <a href="/products/${product.handle}" class="model-thumbnail">
        <img 
          src="${imageUrl}" 
          alt="${imageAlt}" 
          class="model-thumbnail-image"
          loading="lazy"
        />
        <div class="model-thumbnail-info">
          <h4 class="model-thumbnail-title">${product.title}</h4>
          <p class="model-thumbnail-price">${price}</p>
        </div>
      </a>
    `;
  }

  async function fetchRelatedProducts() {
    // Check if we have the required metafield value
    if (!CONFIG.currentProductModel || CONFIG.currentProductModel.trim() === '') {
      console.log('No model metafield found for current product');
      return;
    }

    const loadingEl = document.getElementById('model-thumbnails-loading');
    const containerEl = document.getElementById('model-thumbnails');
    const titleEl = document.getElementById('model-thumbnails-title');

    // Show loading state
    loadingEl.style.display = 'block';

    try {
      // Note: You'll need to implement the Storefront API call here
      // This is a placeholder for the actual API implementation
      
      // For now, let's use the Admin API approach or Liquid-based filtering
      // Since Storefront API requires a separate access token setup
      
      // Alternative approach using Liquid (more reliable for this use case)
      await fetchProductsUsingLiquid();
      
    } catch (error) {
      console.error('Error fetching related products:', error);
      loadingEl.innerHTML = '<p>Unable to load related products</p>';
    }
  }

  // Alternative implementation using Liquid collections
  async function fetchProductsUsingLiquid() {
    const containerEl = document.getElementById('model-thumbnails');
    const titleEl = document.getElementById('model-thumbnails-title');
    const loadingEl = document.getElementById('model-thumbnails-loading');

    // This would need to be populated by Liquid on page load
    // We'll create a more practical solution below
    loadingEl.style.display = 'none';
    
    // Check if we have any products to show
    const hasRelatedProducts = window.modelRelatedProducts && window.modelRelatedProducts.length > 0;
    
    if (hasRelatedProducts) {
      titleEl.style.display = 'block';
      containerEl.innerHTML = window.modelRelatedProducts.map(createThumbnailHTML).join('');
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fetchRelatedProducts);
  } else {
    fetchRelatedProducts();
  }
})();
</script>

<!-- Liquid-based product filtering (more reliable approach) -->
{% comment %}
  This section uses Liquid to find products with matching metafield values
  This is more reliable than the Storefront API for this specific use case
{% endcomment %}

{% assign current_model = product.metafields.custom.model %}
{% assign related_products = '' %}
{% assign related_count = 0 %}

{% if current_model != blank %}
  {% for collection in collections %}
    {% for prod in collection.products limit: 50 %}
      {% if prod.metafields.custom.model == current_model and prod.id != product.id and related_count < 12 %}
        {% assign related_count = related_count | plus: 1 %}
        {% if related_products == '' %}
          {% assign related_products = prod.id %}
        {% else %}
          {% assign related_products = related_products | append: ',' | append: prod.id %}
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endif %}

<script>
// Populate related products data for JavaScript
(function() {
  const relatedProductIds = '{{ related_products }}'.split(',').filter(id => id.trim() !== '');
  const relatedProducts = [];
  
  {% for collection in collections %}
    {% for prod in collection.products %}
      {% assign prod_id_str = prod.id | append: '' %}
      if (relatedProductIds.includes('{{ prod_id_str }}')) {
        relatedProducts.push({
          id: '{{ prod.id }}',
          title: {{ prod.title | json }},
          handle: '{{ prod.handle }}',
          featuredImage: {
            url: '{{ prod.featured_image | img_url: '400x400' }}',
            altText: {{ prod.featured_image.alt | json }}
          },
          priceRange: {
            minVariantPrice: {
              amount: '{{ prod.price | money_without_currency }}',
              currencyCode: '{{ cart.currency.iso_code }}'
            }
          }
        });
      }
    {% endfor %}
  {% endfor %}
  
  // Make available globally
  window.modelRelatedProducts = relatedProducts;
})();
</script>
